dependents: 
description: RapidTiddler highlighting mode for CodeMirror
list: readme
name: CodeMirror Mode RapidTiddler
parent-plugin: $:/plugins/tiddlywiki/codemirror
plugin-type: plugin
title: $:/plugins/menedev/rapidtiddler-codemirror
type: application/json
version: 5.1.23-prerelease

{
    "tiddlers": {
        "$:/config/EditorTypeMappings/text/x-rapidtiddler": {
            "title": "$:/config/EditorTypeMappings/text/x-rapidtiddler",
            "text": "codemirror"
        },
        "$:/plugins/rapidtiddler/codemirror/mode/rapidtiddler/rapidtiddler.css": {
            "text": "span.cm-at {\n  text-decoration: underline;\n  color: cadetblue;\n}\n\nspan.cm-rapid-tag {\n  text-decoration: underline;\n  color: cadetblue !important;\n}\nspan.cm-rapid-link {\n  text-decoration: underline;\n  color: cadetblue !important;\n}\n",
            "type": "text/css",
            "title": "$:/plugins/rapidtiddler/codemirror/mode/rapidtiddler/rapidtiddler.css",
            "tags": "[[$:/tags/Stylesheet]]"
        },
        "$:/plugins/rapidtiddler/codemirror/mode/rapidtiddler/rapidtiddler.js": {
            "text": "// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n    console.log(mod);\n      mod(CodeMirror);\n  })(function(CodeMirror) {\n    \"use strict\";\n  \n    CodeMirror.defineMode(\"rapidtiddler\", function() {\n      return {\n        token: function(stream, state) {\n          var m;\n          if (state.state == \"start\" || state.state == \"whitespace\") {\n            if (m = stream.match(/\\/[^\\s]*/)) {\n                state.state = \"text\";\n                state.type = m[1];\n                return \"action\";\n            }\n            if (m = stream.match(/@[^\\s]+/)) {\n                state.state = \"text\";\n                state.type = m[1];\n                return \"at\";\n            }\n            if (m = stream.match(/#[^\\s]+/)) {\n                state.state = \"text\";\n                state.type = m[1];\n                return \"rapid-tag\";\n            }\n\n            var next = stream.peek();\n            if (next == \"@\") {\n                stream.next();\n                return \"lonely-at\";\n            }\n            if (next == \"#\") {\n                stream.next();\n                return \"lonely-tag\";\n            }\n        }\n        \n        if (m = stream.match(/\\[\\[[^\\]]+\\]\\]/)) {\n            state.state = \"text\";\n            state.type = m[1];\n\n            return \"rapid-link\";\n        }\n\n        if (m = stream.match(/\\[\\[\\]\\]/)) {\n            state.state = \"text\";\n            state.type = m[1];\n            return \"empty-rapid-link\";\n        }\n\n        if (m = stream.match(/\\[\\[[^\\]]+\\]/)) {\n            state.state = \"text\";\n            state.type = m[1];\n            return \"halfclosed-rapid-link\";\n        }\n\n        if (m = stream.match(/\\[\\[[^\\]]*/)) {\n            state.state = \"text\";\n            state.type = m[1];\n            var peek = stream.peek();\n            if (peek != \"]\") {\n                return \"unclosed-rapid-link\";\n            }\n            return \"halfclosed-rapid-link\";\n        }\n\n        if (m = stream.match(/\\s+/)) {\n            state.state = \"whitespace\";\n            state.type = m[1];\n            return \"whitespace\";\n        }\n            \n        if (m = stream.match(/[^\\s]+/)) {\n            state.state = \"text\";\n            state.type = m[1];\n\n            return \"text\";\n        }\n\n            var next = stream.next();\n            state.state = \"text\";\n            return \"text\";\n        },\n        blankLine: function(state) {\n          if (state.state == \"headers\") state.state = \"body\";\n        },\n        startState: function() {\n          return {state: \"start\", type: null};\n        }\n      };\n    });\n  \n    CodeMirror.defineMIME(\"text/x-rapidtiddler\", \"rapidtiddler\");\n    CodeMirror.registerHelper(\"hint\", \"rapidtiddler\", function (editor, options) {\n        //var list = Session.get(Template.strSessionDistinctFields) || [];\n        var cursor = editor.getCursor();\n        var token = editor.getTokenAt(cursor);\n        var list = [];\n        var startOffset = 0;\n        var endOffset = 0;\n\n        if (token.type == \"lonely-at\") {\n            list = $tw.wiki.getTiddlers();\n        }\n\n        if (token.type == \"at\") {\n            startOffset = 1;\n            list = $tw.wiki.getTiddlers()\n                .filter(t =>\n                    // remove \"@\"\n                    t.startsWith(token.string.substring(1))\n                );\n        }\n\n        if (token.type == \"unclosed-rapid-link\") {\n            startOffset = 2;\n            list = $tw.wiki.getTiddlers()\n                .filter(t =>\n                    // remove \"[[\"\n                    t.startsWith(token.string.substring(2))\n                ).map(t => t + \"]]\");\n        }\n\n        if (token.type == \"halfclosed-rapid-link\") {\n            startOffset = 2;\n            list = $tw.wiki.getTiddlers()\n                .filter(t =>\n                    // remove \"[[\"\n                    t.startsWith(token.string.substring(2).slice(0, -1))\n                ).map(t => t + \"]]\");\n        }\n\n        if (token.type == \"rapid-link\" || token.type == \"empty-rapid-link\") {\n            startOffset = 2;\n            list = $tw.wiki.getTiddlers()\n                .filter(t =>\n                    // remove \"[[\"\n                    t.startsWith(token.string.substring(2).slice(0, -2))\n                ).map(t => t + \"]]\");\n        }\n\n        if (token.type == \"lonely-tag\") {\n            list = Object.keys($tw.wiki.getTagMap())\n                .filter(t => !t.startsWith(\"$:/\"));\n        }\n\n        if (token.type == \"rapid-tag\") {\n            startOffset = 1;\n            list = Object.keys($tw.wiki.getTagMap())\n                .filter(t => !t.startsWith(\"$:/\"))\n                .filter(t =>\n                    // remove \"#\"\n                    t.startsWith(token.string.substring(1))\n                )\n                .map(t => \"#\" + t)\n                ;\n        }\n\n        if (token.type == \"action\") {\n            startOffset = 1;\n            console.log(\"eachShadowPlusTiddlers\");\n            $tw.wiki.eachShadowPlusTiddlers(tiddler => list.push(tiddler.fields.title));\n            list = list\n                .filter(t => t.startsWith(\"$:/plugins/menedev/rapidtiddler/action\" + token.string))\n                .map(t => t.substring(\"$:/plugins/menedev/rapidtiddler/action\".length + 1))\n                ;\n        }\n\n        var start = token.start + startOffset;\n        var end = token.end;\n        var result = {\n            list: list,\n            from: CodeMirror.Pos(cursor.line, start),\n            to: CodeMirror.Pos(cursor.line, end)\n        };\n\n        return result;\n    });\n\n    CodeMirror.defineOption(\"apply-rapidtiddler-widgets\", true, function(cm, val, old) {\n        var mode = cm.getMode();\n        if (mode.name != \"rapidtiddler\") return;\n\n        function makeTranscludeWidget(title,options) {\n            options = options || {};\n            var parseTreeDiv = {tree: [{\n                    type: \"element\",\n                    tag: \"span\",\n                    children: []}]},\n                parseTreeImportVariables = {\n                    type: \"importvariables\",\n                    attributes: {\n                        filter: {\n                            name: \"filter\",\n                            type: \"string\"\n                        }\n                    },\n                    isBlock: false,\n                    children: []},\n                parseTreeTransclude = {\n                    type: \"transclude\",\n                    attributes: {\n                        tiddler: {\n                            name: \"tiddler\",\n                            type: \"string\",\n                            value: title}},\n                    isBlock: !options.parseAsInline};\n            if(options.importVariables || options.importPageMacros) {\n                if(options.importVariables) {\n                    parseTreeImportVariables.attributes.filter.value = options.importVariables;\n                } else if(options.importPageMacros) {\n                    parseTreeImportVariables.attributes.filter.value = \"[[$:/core/ui/PageMacros]] [all[shadows+tiddlers]tag[$:/tags/Macro]!has[draft.of]]\";\n                }\n                parseTreeDiv.tree[0].children.push(parseTreeImportVariables);\n                parseTreeImportVariables.children.push(parseTreeTransclude);\n            } else {\n                parseTreeDiv.tree[0].children.push(parseTreeTransclude);\n            }\n            if(options.field) {\n                parseTreeTransclude.attributes.field = {type: \"string\", value: options.field};\n            }\n            if(options.mode) {\n                parseTreeTransclude.attributes.mode = {type: \"string\", value: options.mode};\n            }\n            if(options.children) {\n                parseTreeTransclude.children = options.children;\n            }\n            return $tw.wiki.makeWidget(parseTreeDiv,options);\n        };\n\n        function linkFor(tiddler) {\n            var a = document.createElement(\"a\");\n            a.setAttribute(\"href\", \"#\" + tiddler);\n\n            // var text = document.createTextNode(\"->\");\n            // a.appendChild(text);\n\n            // var span = document.createElement(\"span\");\n            var widget = makeTranscludeWidget(\"$:/plugins/menedev/rapidtiddler/widget/link\", {mode: \"inline\", variables: {target: tiddler, currentTiddler: cm.options.tiddler}, document: document});\n            widget.render(a, null);\n\n            return a;\n        }\n        \n        function todoWidget(name) {\n            var span = document.createElement(\"span\");\n            var tiddler = $tw.wiki.getTiddler(\"$:/plugins/menedev/rapidtiddler/action\" + name)\n            if (!tiddler) {\n                return;\n            }\n\n            var widget = makeTranscludeWidget(tiddler.fields.title, {mode: \"inline\", variables: {currentTiddler: cm.options.tiddler}, document: document});\n            widget.render(span, null);\n\n            return span;\n        }\n\n        function decorateLine(cm, line, cursor) {\n            var tokens = cm.getLineTokens(line);\n            for (var t of tokens) {\n                var arr = cm.doc.findMarksAt({line: line, ch: t.start});\n                for (var bookmark of arr) {\n                    bookmark.clear();\n                }\n\n                if (t.type == \"rapid-link\") {\n                    var marker = cm.doc.markText({line: line, ch: t.start}, {line: line, ch: t.end},\n                        {inclusiveLeft: false, inclusiveRight: false, clearOnEnter: false});\n                    var bookmark = cm.doc.setBookmark({line: line, ch: t.start},\n                        {\n                            widget: linkFor(t.string.slice(2, -2)),\n                            insertLeft: true\n                        }\n                    );\n                    marker.on(\"clear\", function() {\n                        bookmark.clear();\n                    });\n                }\n\n\n                if (t.type == \"action\") {\n                    var widget = todoWidget(t.string);\n                    if (widget) {                    \n                        var marker = cm.doc.markText({line: line, ch: t.start}, {line: line, ch: t.end},\n                            {inclusiveLeft: false, inclusiveRight: false, clearOnEnter: false});\n                        var bookmark = cm.doc.setBookmark({line: line, ch: t.start},\n                            {\n                                widget: widget,\n                                insertLeft: true\n                            }\n                        );\n                        marker.on(\"clear\", function() {\n                            bookmark.clear();\n                        });\n                    }\n                }\n            }\n        }\n\n        function handleUpdate(cm, change) {\n            console.log(arguments);\n            for (var line = change.from.line; line <= change.to.line; line++) {\n                decorateLine(cm, line);\n            }\n        }\n\n        cm.on(\"change\", handleUpdate);\n        // cm.on(\"cursorActivity\", handleUpdate);\n        var initialized = false;\n        cm.on(\"update\", function(cm) {\n            if (initialized) return;\n            initialized = true;\n\n            console.log(arguments);\n            var lineCount = cm.doc.lineCount();\n            for (var i = 0; i < lineCount; i++) {\n                decorateLine(cm, i);\n            }\n        });\n    });\n  });",
            "type": "application/javascript",
            "title": "$:/plugins/rapidtiddler/codemirror/mode/rapidtiddler/rapidtiddler.js",
            "module-type": "codemirror"
        },
        "$:/plugins/menedev/rapidtiddler-codemirror/readme": {
            "title": "$:/plugins/menedev/rapidtiddler-codemirror/readme",
            "text": "This plugin adds Syntax Highlighting for ~TiddlyWiki Classic tiddlers (text/x-rapidtiddler) to the [[CodeMirror|http://codemirror.net]] text editor. It needs the latest [[CodeMirror plugin|$:/plugins/tiddlywiki/codemirror]] to be installed\n\n"
        }
    }
}